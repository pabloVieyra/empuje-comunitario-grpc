// <auto-generated />
using System;
using EmpujeComunitario.MessageFlow.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmpujeComunitario.MessageFlow.DataAccess.Migrations
{
    [DbContext(typeof(MessageFlowDbContext))]
    partial class MessageFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.CancelledEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CancelledEvents");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.CancelledRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("CancelledRequests");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OfferId1")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RequestId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TransferId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TransferId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("OfferId1");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestId1");

                    b.HasIndex("TransferId");

                    b.HasIndex("TransferId1");

                    b.ToTable("DonationItems");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DonationOrganizationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DonationOrganizationId");

                    b.ToTable("DonationOffers");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequesterOrgId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DonationRequests");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DonationOrgId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DonationOrgId");

                    b.HasIndex("RequestId");

                    b.ToTable("DonationTransfers");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.SolidaryEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTimeEvent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<string>("NameEvent")
                        .HasColumnType("text");

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("SolidaryEvents");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.VolunteerAdhesion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("VolunteerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("VolunteerAdhesions");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationItem", b =>
                {
                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationOffer", null)
                        .WithMany("Donations")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationOffer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId1");

                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationRequest", null)
                        .WithMany("Donations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId1");

                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationTransfer", null)
                        .WithMany("Donations")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationTransfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferId1");

                    b.Navigation("Offer");

                    b.Navigation("Request");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationOffer", b =>
                {
                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.Organization", "DonationOrganization")
                        .WithMany("DonationOffers")
                        .HasForeignKey("DonationOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonationOrganization");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationRequest", b =>
                {
                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.Organization", null)
                        .WithMany("DonationRequests")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationTransfer", b =>
                {
                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.Organization", "DonationOrg")
                        .WithMany()
                        .HasForeignKey("DonationOrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonationOrg");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.SolidaryEvent", b =>
                {
                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.Organization", "Org")
                        .WithMany("SolidaryEvents")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.VolunteerAdhesion", b =>
                {
                    b.HasOne("EmpujeComunitario.MessageFlow.DataAccess.Entities.SolidaryEvent", "Event")
                        .WithMany("Adhesions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationOffer", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationRequest", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.DonationTransfer", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.Organization", b =>
                {
                    b.Navigation("DonationOffers");

                    b.Navigation("DonationRequests");

                    b.Navigation("SolidaryEvents");
                });

            modelBuilder.Entity("EmpujeComunitario.MessageFlow.DataAccess.Entities.SolidaryEvent", b =>
                {
                    b.Navigation("Adhesions");
                });
#pragma warning restore 612, 618
        }
    }
}
